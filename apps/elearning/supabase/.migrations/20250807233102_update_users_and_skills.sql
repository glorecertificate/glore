CREATE TYPE "public"."role" AS ENUM('representative', 'tutor', 'volunteer', 'learner');

DROP TRIGGER if EXISTS "set_updated_at" ON "public"."skill_areas";

DROP POLICY "Users can delete their own lessons or by admin, rep" ON "public"."user_lessons";

DROP POLICY "Users can update their own lessons or by admin, rep, or tutor" ON "public"."user_lessons";

DROP POLICY "Users can view their own lessons or by admin, rep, or tutor" ON "public"."user_lessons";

DROP POLICY "Users, admins and representative can update a public record" ON "public"."users";

REVOKE delete ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE insert ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE REFERENCES ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE
SELECT
  ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE trigger ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE
TRUNCATE ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE
UPDATE ON TABLE "public"."skill_areas"
FROM
  "anon";

REVOKE delete ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE insert ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE REFERENCES ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE
SELECT
  ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE trigger ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE
TRUNCATE ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE
UPDATE ON TABLE "public"."skill_areas"
FROM
  "authenticated";

REVOKE delete ON TABLE "public"."skill_areas"
FROM
  "service_role";

REVOKE insert ON TABLE "public"."skill_areas"
FROM
  "service_role";

REVOKE REFERENCES ON TABLE "public"."skill_areas"
FROM
  "service_role";

REVOKE
SELECT
  ON TABLE "public"."skill_areas"
FROM
  "service_role";

REVOKE trigger ON TABLE "public"."skill_areas"
FROM
  "service_role";

REVOKE
TRUNCATE ON TABLE "public"."skill_areas"
FROM
  "service_role";

REVOKE
UPDATE ON TABLE "public"."skill_areas"
FROM
  "service_role";

ALTER TABLE "public"."skills"
DROP CONSTRAINT "skills_skill_area_id_fkey";

ALTER TABLE "public"."skill_areas"
DROP CONSTRAINT "skill_areas_id_key";

ALTER TABLE "public"."skill_areas"
DROP CONSTRAINT "skill_areas_name_key";

ALTER TABLE "public"."skill_areas"
DROP CONSTRAINT "skill_areas_pkey";

DROP TABLE "public"."skill_areas";

CREATE TABLE "public"."skill_groups" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "name" JSONB NOT NULL,
  "icon" TEXT,
  "created_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "updated_at" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  "deleted_at" TIMESTAMP WITH TIME ZONE
);

ALTER TABLE "public"."skill_groups" enable ROW level security;

ALTER TABLE "public"."courses"
DROP COLUMN "type";

ALTER TABLE "public"."courses"
ALTER COLUMN "title"
DROP NOT NULL;

ALTER TABLE "public"."lessons"
DROP COLUMN "type";

ALTER TABLE "public"."memberships"
ALTER COLUMN "role"
SET DATA TYPE role USING "role"::TEXT::role;

ALTER TABLE "public"."skills"
DROP COLUMN "icon_url";

ALTER TABLE "public"."skills"
DROP COLUMN "skill_area_id";

ALTER TABLE "public"."skills"
ADD COLUMN "skill_group_id" BIGINT;

DROP TYPE "public"."course_type";

DROP TYPE "public"."lesson_type";

DROP TYPE "public"."organization_role";

CREATE UNIQUE INDEX courses_description_key ON public.courses USING btree (description);

CREATE UNIQUE INDEX skill_areas_id_key ON public.skill_groups USING btree (id);

CREATE UNIQUE INDEX skill_areas_name_key ON public.skill_groups USING btree (name);

CREATE UNIQUE INDEX skill_areas_pkey ON public.skill_groups USING btree (id);

ALTER TABLE "public"."skill_groups"
ADD CONSTRAINT "skill_areas_pkey" PRIMARY KEY USING index "skill_areas_pkey";

ALTER TABLE "public"."courses"
ADD CONSTRAINT "courses_description_key" UNIQUE USING index "courses_description_key";

ALTER TABLE "public"."skill_groups"
ADD CONSTRAINT "skill_areas_id_key" UNIQUE USING index "skill_areas_id_key";

ALTER TABLE "public"."skill_groups"
ADD CONSTRAINT "skill_areas_name_key" UNIQUE USING index "skill_areas_name_key";

ALTER TABLE "public"."skills"
ADD CONSTRAINT "skills_skill_group_id_fkey" FOREIGN key (skill_group_id) REFERENCES skill_groups (id) ON UPDATE CASCADE ON DELETE SET NULL NOT valid;

ALTER TABLE "public"."skills" validate CONSTRAINT "skills_skill_group_id_fkey";

GRANT delete ON TABLE "public"."skill_groups" TO "anon";

GRANT insert ON TABLE "public"."skill_groups" TO "anon";

GRANT REFERENCES ON TABLE "public"."skill_groups" TO "anon";

GRANT
SELECT
  ON TABLE "public"."skill_groups" TO "anon";

GRANT trigger ON TABLE "public"."skill_groups" TO "anon";

GRANT
TRUNCATE ON TABLE "public"."skill_groups" TO "anon";

GRANT
UPDATE ON TABLE "public"."skill_groups" TO "anon";

GRANT delete ON TABLE "public"."skill_groups" TO "authenticated";

GRANT insert ON TABLE "public"."skill_groups" TO "authenticated";

GRANT REFERENCES ON TABLE "public"."skill_groups" TO "authenticated";

GRANT
SELECT
  ON TABLE "public"."skill_groups" TO "authenticated";

GRANT trigger ON TABLE "public"."skill_groups" TO "authenticated";

GRANT
TRUNCATE ON TABLE "public"."skill_groups" TO "authenticated";

GRANT
UPDATE ON TABLE "public"."skill_groups" TO "authenticated";

GRANT delete ON TABLE "public"."skill_groups" TO "service_role";

GRANT insert ON TABLE "public"."skill_groups" TO "service_role";

GRANT REFERENCES ON TABLE "public"."skill_groups" TO "service_role";

GRANT
SELECT
  ON TABLE "public"."skill_groups" TO "service_role";

GRANT trigger ON TABLE "public"."skill_groups" TO "service_role";

GRANT
TRUNCATE ON TABLE "public"."skill_groups" TO "service_role";

GRANT
UPDATE ON TABLE "public"."skill_groups" TO "service_role";

CREATE POLICY "Users can delete their own lessons or by admin, rep" ON "public"."user_lessons" AS permissive FOR delete TO authenticated USING (
  (
    (auth.uid () = user_id) OR
    (
      SELECT
        users.is_admin
      FROM
        users
      WHERE
        (users.id = auth.uid ())
    ) OR
    (
      user_id IN (
        SELECT
          memberships.user_id
        FROM
          memberships
        WHERE
          (
            memberships.organization_id IN (
              SELECT
                memberships_1.organization_id
              FROM
                memberships memberships_1
              WHERE
                (
                  (memberships_1.user_id = auth.uid ()) AND
                  (memberships_1.role = 'representative'::role)
                )
            )
          )
      )
    )
  )
);

CREATE POLICY "Users can update their own lessons or by admin, rep, or tutor" ON "public"."user_lessons" AS permissive
FOR UPDATE
  TO authenticated USING (
    (
      (auth.uid () = user_id) OR
      (
        SELECT
          users.is_admin
        FROM
          users
        WHERE
          (users.id = auth.uid ())
      ) OR
      (
        user_id IN (
          SELECT
            memberships.user_id
          FROM
            memberships
          WHERE
            (
              memberships.organization_id IN (
                SELECT
                  memberships_1.organization_id
                FROM
                  memberships memberships_1
                WHERE
                  (
                    (memberships_1.user_id = auth.uid ()) AND
                    (memberships_1.role = ANY (ARRAY['representative'::role, 'tutor'::role]))
                  )
              )
            )
        )
      )
    )
  )
WITH
  CHECK ((auth.uid () = user_id));

CREATE POLICY "Users can view their own lessons or by admin, rep, or tutor" ON "public"."user_lessons" AS permissive FOR
SELECT
  TO authenticated USING (
    (
      (auth.uid () = user_id) OR
      (
        SELECT
          users.is_admin
        FROM
          users
        WHERE
          (users.id = auth.uid ())
      ) OR
      (
        user_id IN (
          SELECT
            memberships.user_id
          FROM
            memberships
          WHERE
            (
              memberships.organization_id IN (
                SELECT
                  memberships_1.organization_id
                FROM
                  memberships memberships_1
                WHERE
                  (
                    (memberships_1.user_id = auth.uid ()) AND
                    (memberships_1.role = ANY (ARRAY['representative'::role, 'tutor'::role]))
                  )
              )
            )
        )
      )
    )
  );

CREATE POLICY "Users, admins and representative can update a public record" ON "public"."users" AS permissive
FOR UPDATE
  TO authenticated USING (
    (
      (auth.uid () = id) OR
      (
        SELECT
          users_1.is_admin
        FROM
          users users_1
        WHERE
          (users_1.id = auth.uid ())
      ) OR
      (
        id IN (
          SELECT
            memberships.user_id
          FROM
            memberships
          WHERE
            (
              memberships.organization_id IN (
                SELECT
                  memberships_1.organization_id
                FROM
                  memberships memberships_1
                WHERE
                  (
                    (memberships_1.user_id = auth.uid ()) AND
                    (memberships_1.role = ANY (ARRAY['representative'::role, 'tutor'::role]))
                  )
              )
            )
        )
      )
    )
  )
WITH
  CHECK ((auth.uid () = id));

CREATE TRIGGER set_updated_at before
UPDATE ON public.skill_groups FOR each ROW
EXECUTE function moddatetime ('updated_at');

ALTER TABLE "public"."users"
DROP COLUMN "nationality";

ALTER TABLE "public"."courses"
DROP CONSTRAINT "courses_description_key";

ALTER TABLE "public"."courses"
DROP CONSTRAINT "courses_title_key";

ALTER TABLE "public"."courses"
ALTER COLUMN "sort_order"
DROP NOT NULL;
