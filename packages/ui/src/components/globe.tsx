'use client'

import createGlobe, { type COBEOptions } from 'cobe'
import { memo, useCallback, useEffect, useMemo, useRef } from 'react'
import { useSpring } from 'react-spring'

import { cn } from '@repo/ui/utils'

export interface GlobeColorOptions extends Pick<GlobeOptions, 'baseColor' | 'glowColor'> {
  /**
   * Marker color or collection of colors as RGB array.
   * If multiple colors are provided, each marker will pick a random color from the array.
   * @default [[255, 255, 255]]
   */
  markerColor?: [number, number, number] | [number, number, number][]
}

export interface GlobeOptions extends Omit<COBEOptions, 'markerColor'>, GlobeColorOptions {
  friction: number
  mass: number
  precision: number
  radius: number
  tension: number
  transitionDuration: number
}

const MARKER_MIN_SIZE = 0.02
const MARKER_MAX_SIZE = 0.05

const MARKER_LOCATIONS = [
  [51.5074, -0.1278],
  [48.8566, 2.3522],
  [52.52, 13.405],
  [40.4168, -3.7038],
  [41.9028, 12.4964],
  [52.3676, 4.9041],
  [48.2082, 16.3738],
  [47.3769, 8.5417],
  [59.3293, 18.0686],
  [55.6761, 12.5683],
  [52.2297, 21.0122],
  [50.0755, 14.4378],
  [55.7558, 37.6176],
  [41.0082, 28.9784],
  [37.9838, 23.7275],
  [40.7128, -74.006],
  [34.0522, -118.2437],
  [41.8781, -87.6298],
  [37.7749, -122.4194],
  [43.651, -79.347],
  [45.5017, -73.5673],
  [49.2827, -123.1207],
  [19.4326, -99.1332],
  [25.7617, -80.1918],
  [42.3601, -71.0589],
  [47.6062, -122.3321],
  [-23.5505, -46.6333],
  [-34.6037, -58.3816],
  [-22.9068, -43.1729],
  [-12.0464, -77.0428],
  [4.711, -74.0721],
  [-33.4489, -70.6693],
  [10.4806, -66.9036],
  [35.6895, 139.6917],
  [31.2304, 121.4737],
  [39.9042, 116.4074],
  [19.076, 72.8777],
  [28.6139, 77.209],
  [12.9716, 77.5946],
  [22.5726, 88.3639],
  [13.0827, 80.2707],
  [37.5665, 126.978],
  [13.7563, 100.5018],
  [1.3521, 103.8198],
  [22.3193, 114.1694],
  [25.033, 121.5654],
  [-6.2088, 106.8456],
  [14.5995, 120.9842],
  [3.139, 101.6869],
  [21.0278, 105.8342],
  [10.8231, 106.6297],
  [24.8607, 67.0011],
  [31.5204, 74.3587],
  [35.6892, 51.389],
  [25.276987, 55.296249],
  [24.7136, 46.6753],
  [33.3152, 44.3661],
  [43.2551, 76.9126],
  [41.2995, 69.2401],
  [30.0244, 31.2357],
  [6.5244, 3.3792],
  [-26.2041, 28.0473],
  [-33.9249, 18.4241],
  [-1.2921, 36.8219],
  [33.5731, -7.5898],
  [36.7538, 3.0588],
  [36.8065, 10.1815],
  [9.145, 40.4897],
  [5.6037, -0.187],
  [-4.4419, 15.2663],
  [-8.839, 13.2894],
  [-33.8688, 151.2093],
  [-37.8136, 144.9631],
  [-27.4698, 153.0251],
  [-31.9505, 115.8605],
  [-36.8485, 174.7633],
  [53.3498, -6.2603],
  [54.6072, -5.9278],
  [55.8642, -4.2518],
  [51.4816, -3.1791],
  [50.8503, 4.3517],
  [50.4501, 30.5234],
  [59.9139, 10.7522],
  [60.1699, 24.9384],
  [64.1466, -21.9426],
  [49.75, 6.1667],
  [46.2044, 6.1432],
  [43.7696, 11.2558],
  [45.4642, 9.19],
  [46.948, 7.4474],
  [38.7223, -9.1393],
  [41.1579, -8.6291],
  [39.4699, -0.3763],
  [37.3891, -5.9845],
  [43.4643, -3.8044],
  [52.0907, 5.1214],
  [57.7089, 11.9746],
  [53.5511, 9.9937],
  [50.1109, 8.6821],
  [49.4521, 11.0767],
  [48.1351, 11.582],
  [47.0379, 15.44],
  [46.0569, 14.5058],
  [45.815, 15.9819],
  [44.4949, 20.4623],
  [42.6977, 23.3219],
  [41.9973, 21.428],
  [40.6401, 22.9444],
  [42.5063, 19.2663],
  [43.8564, 18.4131],
  [45.2671, 19.8335],
  [47.1625, 19.5033],
  [49.8397, 24.0297],
  [51.8985, -8.4756],
  [53.3441, -6.2675],
  [52.6638, -8.6267],
  [51.6789, -1.8262],
  [52.2053, 0.1218],
  [50.8225, -0.1372],
  [51.752, -1.2577],
  [52.9548, -1.1581],
  [53.9599, -1.0873],
  [54.9783, -1.6174],
  [53.7267, -0.3397],
  [51.3811, 1.3428],
  [50.8429, 0.676],
  [43.6532, -79.3832],
  [45.4215, -75.6972],
  [46.8139, -71.208],
  [51.0447, -114.0719],
  [52.1205, -106.6306],
  [49.8951, -97.1384],
  [44.2619, -72.5806],
  [46.2382, -63.1311],
  [47.5615, -52.7126],
  [64.0685, -21.9426],
  [68.7864, 33.0668],
  [69.6492, 18.9553],
  [70.4926, 23.6705],
  [61.2181, -149.9003],
  [21.3099, -157.8581],
  [20.6597, -103.3496],
  [25.6866, -100.3161],
  [32.5149, -117.0382],
  [31.7619, -106.485],
  [24.1477, -110.3005],
  [23.6345, -102.5528],
  [21.1619, -86.8515],
  [20.9674, -89.5926],
  [18.5001, -88.296],
  [17.9869, -92.9303],
  [16.7569, -93.1292],
  [14.6349, -90.5069],
  [13.7942, -88.8965],
  [12.1364, -86.2514],
  [9.9281, -84.0907],
  [8.538, -80.7821],
  [8.0018, -62.6857],
  [6.8013, -58.1551],
  [5.852, -55.2038],
  [0.1807, -78.4678],
  [-3.4653, -62.2159],
  [-8.7742, -63.9004],
  [-15.8267, -70.027],
  [-16.2902, -63.5887],
  [-25.2637, -57.5759],
  [-41.1335, -71.3103],
  [-19.9167, -43.9345],
  [-15.7942, -47.8822],
  [-8.0476, -79.0654],
  [-1.8312, -78.1834],
  [6.2518, -75.5636],
  [10.9685, -74.7813],
  [11.0041, -74.807],
  [8.759, -75.8819],
  [7.1256, -73.1198],
  [4.0435, -76.2051],
  [1.6508, -75.6062],
  [-5.7945, -35.211],
  [-8.0476, -34.877],
  [-9.6658, -35.735],
  [-12.2777, -38.9662],
  [-20.3155, -40.3128],
  [-25.4284, -49.2733],
  [-27.5954, -48.548],
  [-29.6868, -51.1314],
  [-30.0346, -51.2177],
  [-32.0319, -52.0986],
  [-34.8118, -56.1645],
  [31.2357, 30.0444],
  [26.8206, 30.8025],
  [24.0889, 32.8998],
  [22.3964, 31.2656],
  [25.6872, 32.6396],
  [27.1127, 31.326],
  [29.9097, 31.2156],
  [31.0409, 31.3785],
  [30.5965, 32.6014],
  [31.7683, 35.2137],
  [33.5138, 36.2765],
  [35.5018, 35.5018],
  [33.8869, 35.5131],
  [31.9515, 35.2331],
  [32.4279, 53.688],
  [29.5918, 52.5836],
  [28.0339, 56.4956],
  [26.324, 50.2057],
  [21.5169, 39.8579],
  [26.8206, 49.69],
  [31.9686, 54.427],
  [29.3759, 47.9774],
  [26.0667, 50.5577],
  [36.3382, 43.145],
  [40.4093, 49.8671],
  [38.4161, 27.1287],
  [39.9334, 32.8597],
  [36.8969, 30.7133],
  [36.3982, 36.3498],
  [37.0662, 37.3833],
  [39.0392, 35.3213],
  [40.1431, 26.4142],
  [41.6086, 21.7453],
  [47.1584, 27.5754],
  [44.4386, 26.0966],
  [45.9432, 24.9668],
  [48.1486, 17.1077],
  [49.1951, 16.6068],
  [48.7758, 9.1829],
  [45.764, 4.8357],
  [43.6045, 3.8767],
  [43.7102, 7.262],
  [45.4408, 4.3872],
  [47.2184, 6.156],
  [48.5734, 7.7521],
  [49.4431, 1.0993],
  [49.2628, 4.0347],
  [50.6292, 5.5787],
  [46.5197, 6.6323],
  [47.0502, 8.3093],
  [8.78, 34.5085],
  [15.5527, 32.5363],
  [12.8628, 30.2176],
  [9.0579, 38.7666],
  [9.0765, 7.3986],
  [11.8251, 13.1566],
  [12.6392, 7.8901],
  [13.5137, 2.1098],
  [6.1319, 1.2228],
  [4.0511, 9.7679],
  [3.3792, 6.5244],
  [0.3476, 6.7368],
  [-15.9254, 23.8167],
  [-17.8277, 31.0522],
  [-22.9576, 18.4904],
  [-29.8587, 31.0218],
  [-34.1115, 18.4173],
  [7.9465, -1.0232],
  [10.3904, -1.0566],
  [12.1165, -1.4996],
  [9.5293, -0.7594],
  [6.4541, 3.3947],
  [13.9014, 20.1408],
  [31.7917, -7.0926],
  [34.0209, -6.8326],
  [35.7595, -5.8338],
  [33.8869, 10.1601],
  [34.7407, 10.76],
  [36.8381, 10.1658],
  [31.7917, 35.2081],
  [32.8872, 13.1913],
  [22.396427, 114.109497],
  [-0.7893, 113.9213],
  [5.4164, 100.3327],
  [4.2105, 101.9758],
  [2.0469, 100.3543],
  [1.4655, 103.7578],
  [6.9271, 158.161],
  [7.4256, 151.7823],
  [9.528, 147.154],
  [-4.2634, 142.554],
  [-7.2575, 112.7521],
  [-8.3405, 115.092],
  [-8.6524, 116.3247],
  [3.5952, 98.6722],
  [5.5483, 95.3238],
  [-2.5489, 140.7137],
  [-3.6954, 128.6894],
  [-5.1477, 119.4327],
  [-6.9175, 107.6191],
  [-7.7972, 110.3695],
  [-8.5069, 115.2624],
  [53.5444, -113.4909],
  [52.1332, -106.67],
  [50.4452, -104.6189],
  [53.1355, -57.6604],
  [58.4162, -68.5108],
  [63.7467, -68.517],
  [69.5391, -133.0516],
  [66.0401, -18.5428],
  [70.286, 31.1085],
  [78.9167, 11.956],
  [62.4722, 6.1549],
  [63.4305, 10.3951],
  [61.4978, 23.761],
  [64.9631, 25.7186],
  [69.0795, 20.2134],
  [-34.9285, 138.6007],
  [-23.698, 133.8807],
  [-19.259, 146.8169],
  [-16.2839, 145.7781],
  [-12.4634, 130.8456],
  [-20.9176, 165.618],
  [-22.2711, 166.4416],
  [-41.2865, 174.7762],
  [-45.0312, 168.6626],
  [-46.4132, 168.3538],
  [29.7604, -95.3698],
  [33.4484, -112.074],
  [39.7392, -104.9903],
  [45.5152, -122.6784],
  [44.9537, -93.09],
  [39.2904, -76.6122],
  [35.2271, -80.8431],
  [36.1627, -86.7816],
  [32.7767, -96.797],
  [41.4993, -81.6944],
  [43.0389, -87.9065],
  [39.9612, -82.9988],
  [37.2431, -115.7918],
  [40.2731, -86.1349],
  [35.7796, -78.6382],
  [32.0835, -81.0998],
  [30.3322, -81.6557],
  [43.0731, -89.4012],
  [46.7867, -92.1005],
  [47.0379, -122.9015],
  [35.1796, 129.0756],
  [36.061, 120.3826],
  [30.5928, 114.3055],
  [34.3416, 108.9398],
  [29.563, 106.5516],
  [38.0428, 114.5149],
  [36.675, 117.1205],
  [32.0617, 118.7778],
  [23.1291, 113.2644],
  [26.0789, 119.3163],
  [24.4539, 118.0819],
  [22.5431, 114.0579],
  [36.3982, 127.3647],
  [37.4563, 126.7052],
  [36.7783, 126.4951],
  [35.1595, 126.8526],
  [35.0116, 135.7681],
  [34.6937, 135.5023],
  [35.6762, 139.6503],
  [35.4437, 139.638],
  [35.6584, 139.7016],
  [43.0642, 141.3469],
  [42.9849, 141.3625],
  [38.2682, 140.8694],
  [39.7036, 141.1527],
  [38.7223, 139.7872],
  [16.4637, 107.5909],
  [10.7769, 106.7009],
  [21.0245, 105.8412],
  [20.8449, 106.6881],
  [16.0544, 108.2022],
  [11.5449, 104.8922],
  [18.7883, 98.9853],
  [20.7984, 99.2437],
  [19.8563, 99.8822],
  [15.87, 100.9925],
  [7.8731, 98.6421],
  [3.5952, 98.6722],
  [5.5483, 95.3238],
  [13.4125, 103.8667],
  [11.5564, 104.9282],
  [21.0285, 105.8542],
  [16.0678, 108.2208],
  [12.2388, 109.1967],
  [8.5448, 104.5178],
  [25.2048, 55.2708],
  [24.4539, 54.3773],
  [26.2041, 50.5858],
  [29.3117, 47.4818],
  [33.6844, 73.0479],
  [33.7294, 73.0931],
  [34.0151, 71.5249],
  [27.7172, 85.324],
  [28.2096, 83.9856],
  [22.9734, 87.785],
  [26.9124, 75.7873],
  [23.0225, 72.5714],
  [21.1702, 72.8311],
  [18.5204, 73.8567],
  [17.385, 78.4867],
  [15.3173, 75.7139],
  [11.0168, 76.9558],
  [9.9252, 78.1198],
  [8.0883, 77.5385],
  [10.8505, 76.2711],
  [12.2958, 76.6394],
  [28.7041, 77.1025],
  [30.7333, 76.7794],
  [31.1048, 77.1734],
  [32.7266, 74.857],
  [34.0837, 74.7973],
  [23.685, 90.3563],
  [24.3636, 88.6241],
  [25.7479, 89.2754],
  [22.3569, 91.7832],
  [23.8103, 90.4125],
  [26.254, 92.9376],
  [25.5788, 91.8933],
  [27.4712, 89.6339],
  [28.3949, 84.124],
  [29.648, 82.3296],
  [30.0668, 79.0193],
  [31.634, 74.8723],
  [33.9391, 67.71],
  [25.3548, 68.3706],
  [27.0238, 67.0682],
  [25.3963, 68.3641],
  [30.3753, 69.3451],
  [31.5804, 65.7372],
  [32.1877, 64.6166],
  [33.694, 66.5861],
  [34.3277, 62.204],
  [36.5626, 53.063],
  [32.4279, 53.688],
  [29.5918, 52.5836],
  [31.8974, 54.3569],
  [36.2605, 50.0041],
  [38.2904, 46.3019],
  [40.1431, 44.5152],
  [41.7151, 44.8271],
  [40.1792, 44.4991],
  [42.3154, 43.3569],
  [43.5089, 41.7193],
  [43.4089, 41.8939],
  [47.9162, 106.9057],
  [52.8932, 158.2061],
  [61.524, 105.3188],
  [55.0084, 82.9357],
  [56.8431, 60.6454],
  [59.9311, 30.3609],
  [51.1694, 71.4491],
  [53.2001, 50.15],
  [55.1644, 61.4368],
  [56.4977, 84.9744],
  [64.7511, 177.4933],
  [46.7296, 94.9625],
  [42.8746, 74.5698],
  [39.0392, 125.7625],
  [45.7833, 126.65],
  [31.0461, 121.3997],
]

const GLOBE_OPTIONS: GlobeOptions = {
  baseColor: [1, 1, 1],
  dark: 0,
  devicePixelRatio: 2,
  diffuse: 0,
  friction: 40,
  glowColor: [1, 1, 1],
  height: 400,
  mapBaseBrightness: 0,
  mapBrightness: 12,
  mapSamples: 15000,
  markerColor: [1, 1, 1],
  markers: (MARKER_LOCATIONS as [number, number][]).map(location => ({
    location,
    size: Math.random() * (MARKER_MAX_SIZE - MARKER_MIN_SIZE) + MARKER_MIN_SIZE,
  })),
  mass: 1,
  offset: [0, 0],
  onRender: () => {
    /**/
  },
  opacity: 0.75,
  phi: 0,
  precision: 0.001,
  radius: 0,
  scale: 1,
  tension: 280,
  theta: 0.4,
  transitionDuration: 400,
  width: 400,
}

const normalizeRgb = (color: [number, number, number]) =>
  color.map(c => Math.min(Math.max(c, 0), 255) / 255) as [number, number, number]

export interface GlobeProps extends Partial<GlobeOptions> {
  className?: string
}

export const Globe = memo(({ className, ...options }: GlobeProps) => {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const paramsRef = useRef<COBEOptions>(null)
  const pointerRef = useRef<number>(null)
  const movementRef = useRef(0)

  let phi = 0
  let width = 0

  const { friction, mass, precision, radius, tension, transitionDuration, ...config } = useMemo(() => {
    const { baseColor, glowColor, markerColor, markers, ...rest } = {
      ...GLOBE_OPTIONS,
      ...options,
    } as Required<GlobeOptions>

    const isMulticolor = Array.isArray(markerColor[0])
    const colors = ((isMulticolor ? markerColor : [markerColor]) as [number, number, number][]).map(normalizeRgb)
    const color = colors[0]

    return {
      ...rest,
      baseColor: normalizeRgb(baseColor),
      glowColor: normalizeRgb(glowColor),
      markerColor: color,
      markers: markers.map(({ color, ...marker }) => ({
        ...marker,
        color: color ?? (isMulticolor ? colors[Math.floor(Math.random() * colors.length)] : color),
      })),
    }
  }, [options])

  useEffect(() => {
    const markers =
      paramsRef.current &&
      paramsRef.current?.markerColor.flat().sort().join('') === config.markerColor.flat().sort().join('')
        ? (paramsRef.current?.markers ?? [])
        : config.markers
    paramsRef.current = { ...config, markers }
  }, [config])

  const [{ r }, api] = useSpring(() => ({ config: { friction, mass, precision, tension }, r: radius }))

  const onMouseMove = useCallback(
    (e: React.MouseEvent) => {
      if (!pointerRef.current) return
      const delta = e.clientX - pointerRef.current
      movementRef.current = delta
      void api.start({ r: delta / 200 })
    },
    [api],
  )

  const onPointerDown = useCallback((e: React.PointerEvent) => {
    pointerRef.current = e.clientX - movementRef.current
    if (!canvasRef.current) return
    canvasRef.current.style.cursor = 'grabbing'
  }, [])

  const onPointerOut = useCallback(() => {
    pointerRef.current = null
    if (!canvasRef.current) return
  }, [])

  const onTouchMove = useCallback(
    (e: React.TouchEvent) => {
      if (!pointerRef.current) return
      const delta = e.touches[0].clientX - pointerRef.current
      movementRef.current = delta
      void api.start({ r: delta / 100 })
    },
    [api],
  )

  const onResize = useCallback(() => {
    if (!canvasRef.current) return
    // eslint-disable-next-line react-hooks/exhaustive-deps
    width = canvasRef.current.offsetWidth
  }, [])

  useEffect(() => {
    if (!canvasRef.current) return

    window.addEventListener('resize', onResize)
    onResize()

    const globe = createGlobe(canvasRef.current, {
      ...config,
      onRender: cobe => {
        const state = cobe as COBEOptions

        // eslint-disable-next-line react-hooks/exhaustive-deps
        if (!pointerRef.current) phi += 0.005
        state.phi = phi + (r?.get() ?? 0)
        state.width = width * 2
        state.height = width * 2

        if (!paramsRef.current) return
        if (!state.markers || state.baseColor?.some((n, i) => n !== paramsRef.current?.baseColor[i])) {
          state.markers = paramsRef.current.markers
        }

        state.baseColor = paramsRef.current.baseColor
        state.dark = paramsRef.current.dark
        state.diffuse = paramsRef.current.diffuse
        state.glowColor = paramsRef.current.glowColor
        state.mapBaseBrightness = paramsRef.current.mapBaseBrightness
        state.mapBrightness = paramsRef.current.mapBrightness
        state.mapSamples = paramsRef.current.mapSamples
        state.markerColor = paramsRef.current.markerColor
        state.offset = paramsRef.current.offset
        state.opacity = paramsRef.current.opacity
        state.scale = paramsRef.current.scale
        state.theta = paramsRef.current.theta
      },
    })

    setTimeout(() => {
      if (!canvasRef.current) return
      canvasRef.current.style.opacity = '1'
    })

    return () => {
      globe.destroy()
      window.removeEventListener('resize', onResize)
    }
  }, [])

  return (
    <canvas
      className={cn('cursor-grab bg-transparent opacity-0 transition-opacity duration-300', className)}
      onMouseMove={onMouseMove}
      onPointerDown={onPointerDown}
      onPointerOut={onPointerOut}
      onPointerUp={onPointerOut}
      onTouchMove={onTouchMove}
      ref={canvasRef}
    />
  )
})
